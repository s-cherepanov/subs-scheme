> (define (average x y)
.         (/ (+ x y) 2))
average

> (define (improve guess x)
.         (average guess (/ x guess)))
improve

> (define (good-enough? guess x)
.         (< (abs (- (square guess) x)) 0.001))
good-enough?

> (define (sqrt-iter guess x)
.         (if (good-enough? guess x)
.             guess
.             (sqrt-iter (improve guess x)
.                        x)))
sqrt-iter

> (define (sqrt x)
.         (sqrt-iter 1.0 x))
sqrt

> (sqrt 9)
3.00009
> (sqrt (+ 100 37))
11.7047
> (sqrt (+ (sqrt 2) (sqrt 3)))
1.77393
> (square (sqrt 1000))
1000.0

> (define (new-if predicate then-clause else-clause)
.         (cond (predicate then-clause)
.               (else else-clause)))
new-if

> (new-if (= 2 3) 0 5)
5

> (new-if (= 1 1) 0 5)
0


