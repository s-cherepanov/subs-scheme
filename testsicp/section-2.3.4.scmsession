
> (define (make-leaf symbol weight)
.         (list 'leaf symbol weight))
make-leaf

> (define (leaf? object)
.         (eq? (car object) 'leaf))
leaf?

> (define (symbol-leaf x) (cadr x))
symbol-leaf

> (define (weight-leaf x) (caddr x))
weight-leaf

> (define (left-branch tree) (car tree))
left-branch

> (define (right-branch tree) (cadr tree))
right-branch

> (define (symbols tree)
.         (if (leaf? tree)
.             (list (symbol-leaf tree))
.             (caddr tree)))
symbols

> (define (weight tree)
.         (if (leaf? tree)
.             (weight-leaf tree)
.             (cadddr tree)))
weight

> (define (make-code-tree left right)
.         (list left
.               right
.               (append (symbols left) (symbols right))
.               (+ (weight left) (weight right))))
make-code-tree


> (define (decode bits tree)
.         (define (decode-1 bits current-branch)
.           (if (null? bits)
.               '()
.               (let ((next-branch
.                      (choose-branch (car bits) current-branch)))
.                 (if (leaf? next-branch)
.                     (cons (symbol-leaf next-branch)
.                           (decode-1 (cdr bits) tree))
.                     (decode-1 (cdr bits) next-branch)))))
.         (decode-1 bits tree))
decode


> (define (choose-branch bit branch)
.         (cond ((= bit 0) (left-branch branch))
.               ((= bit 1) (right-branch branch))
.               (else (error "bad bit -- CHOOSE-BRANCH" bit))))
choose-branch

> (define (adjoin-set x set)
.         (cond ((null? set) (list x))
.               ((< (weight x) (weight (car set))) (cons x set))
.               (else (cons (car set)
.                           (adjoin-set x (cdr set))))))
adjoin-set


> (define (make-leaf-set pairs)
.         (if (null? pairs)
.             '()
.             (let ((pair (car pairs)))
.               (adjoin-set (make-leaf (car pair)    ; symbol
.                                      (cadr pair))  ; frequency
.                           (make-leaf-set (cdr pairs))))))
make-leaf-set


> (define sample-tree
.         (make-code-tree (make-leaf 'A 4)
.                         (make-code-tree
.                          (make-leaf 'B 2)
.                          (make-code-tree (make-leaf 'D 1)
.                                          (make-leaf 'C 1)))))
sample-tree

> (define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
sample-message

> (decode sample-message sample-tree)
(A D A B B C A)




