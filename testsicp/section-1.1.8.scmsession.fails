> (define (square x) (* x x))
square

> (define (double x) (+ x x))
double

> (define (square x)
.         (exp (double (log x))))
square

> (square 4)
16

> (define (square x) (* x x))
square

> (define (square y) (* y y))
square

> (square 4)
16

> (define (good-enough? guess x)
.         (< (abs (- (square guess) x)) 0.001))
good-enough?
> (define (improve guess x)
.         (average guess (/ x guess)))
improve
> (define (good-enough? guess x)
.         (< (abs (- (square guess) x)) 0.001))
good-enough?
> (define (sqrt-iter guess x)
.         (if (good-enough? guess x)
.             guess
.             (sqrt-iter (improve guess x) x)))
sqrt-iter
> (define (sqrt x)
.         (sqrt-iter 1.0 x))
sqrt

> (sqrt 16)
4

> (define (sqrt x)
.         (define (good-enough? guess x)
.                 (< (abs (- (square guess) x)) 0.001))
.         (define (improve guess x)
.                 (average guess (/ x guess)))
.         (define (sqrt-iter guess x)
.                 (if (good-enough? guess x)
.                     guess
.                     (sqrt-iter (improve guess x) x)))
.         (sqrt-iter 1.0 x))
sqrt

> (sqrt 16)
4


> (define (sqrt x)
.         (define (good-enough? guess)
.                 (< (abs (- (square guess) x)) 0.001))
.         (define (improve guess)
.                 (average guess (/ x guess)))
.         (define (sqrt-iter guess)
.                 (if (good-enough? guess)
.                     guess
.                     (sqrt-iter (improve guess))))
.         (sqrt-iter 1.0))
sqrt

> (sqrt 16)
4


