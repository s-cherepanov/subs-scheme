> (define (mycons x y)
.         (define (dispatch m)
.                 (cond ((= m 0) x)
.                       ((= m 1) y)
.                       (else (error "Argument not 0 or 1 -- CONS" m))))
.         dispatch)
mycons

> (define (mycar z) (z 0))
mycar

> (define (mycdr z) (z 1))
mycdr

> (define x (mycons 1 2))
x

> (mycar x)
1

> (mycdr x)
2




> (define (mycons x y)
.         (lambda (m) (m x y)))
mycons

> (define (mycar z)
.         (z (lambda (p q) p)))
mycar

> (define (mycdr z)
.         (z (lambda (p q) q)))
mycdr


> (define x (mycons 1 2))
x

> (mycar x)
1

> (mycdr x)
2



> (define zero (lambda (f) (lambda (x) x)))
zero

> (define (add-1 n)
.         (lambda (f) (lambda (x) (f ((n f) x)))))
add-1




