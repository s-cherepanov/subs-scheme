
> ; Sets as unordered lists

> (define (element-of-set? x set)
.         (cond ((null? set) #f)
.               ((equal? x (car set)) #t)
.               (else (element-of-set? x (cdr set)))))
element-of-set?

> (define (adjoin-set x set)
.         (if (element-of-set? x set)
.             set
.             (cons x set)))
adjoin-set

> (define (intersection-set set1 set2)
.         (cond ((or (null? set1) (null? set2)) '())
.               ((element-of-set? (car set1) set2)
.                (cons (car set1)
.                      (intersection-set (cdr set1) set2)))
.               (else (intersection-set (cdr set1) set2))))
intersection-set

> (element-of-set? 2 (list 3 1 2))
#t

> (element-of-set? 4 (list 3 1 2))
#f

> (adjoin-set 2 (list 3 1 2))
(3 1 2)

> (adjoin-set 4 (list 3 1 2))
(4 3 1 2)

> (intersection-set (list 3 1 2) (list 5 3 4))
(3)


> ; Sets as ordered lists

> (define (element-of-set? x set)
.         (cond ((null? set) #f)
.               ((= x (car set)) #t)
.               ((< x (car set)) #f)
.               (else (element-of-set? x (cdr set)))))
element-of-set?

> (define (intersection-set set1 set2)
.         (if (or (null? set1) (null? set2))
.             '()
.             (let ((x1 (car set1)) (x2 (car set2)))
.               (cond ((= x1 x2)
.                      (cons x1
.                            (intersection-set (cdr set1)
.                                              (cdr set2))))
.                     ((< x1 x2)
.                      (intersection-set (cdr set1) set2))
.                     ((< x2 x1)
.                      (intersection-set set1 (cdr set2)))))))
intersection-set


> (element-of-set? 2 (list 1 2 3))
#t

> (element-of-set? 4 (list 1 2 3))
#f

> (intersection-set (list 1 2 3) (list 3 4 5))
(3)


> ; Sets as binary trees

> (define (entry tree) (car tree))
entry

> (define (left-branch tree) (cadr tree))
left-branch

> (define (right-branch tree) (caddr tree))
right-branch

> (define (make-tree entry left right)
.         (list entry left right))
make-tree

> (define (element-of-set? x set)
.         (cond ((null? set) #f)
.               ((= x (entry set)) #t)
.               ((< x (entry set))
.                (element-of-set? x (left-branch set)))
.               ((> x (entry set))
.                (element-of-set? x (right-branch set)))))
element-of-set?

> (define (adjoin-set x set)
.         (cond ((null? set) (make-tree x '() '()))
.               ((= x (entry set)) set)
.               ((< x (entry set))
.                (make-tree (entry set)
.                           (adjoin-set x (left-branch set))
.                           (right-branch set)))
.               ((> x (entry set))
.                (make-tree (entry set)
.                           (left-branch set)
.                           (adjoin-set x (right-branch set))))))
adjoin-set

> (define myset (adjoin-set 2 (adjoin-set 3 (adjoin-set 1 '()))))
myset

> myset
(1 () (3 (2 () ()) ()))

> (element-of-set? 2 myset)
#t

> (element-of-set? 4 myset)
#f

> (define (tree->list-1 tree)
.         (if (null? tree)
.             '()
.             (append (tree->list-1 (left-branch tree))
.                     (cons (entry tree)
.                           (tree->list-1 (right-branch tree))))))
tree->list-1

> (tree->list-1 myset)
(1 2 3)


> (define (tree->list-2 tree)
.         (define (copy-to-list tree result-list)
.                 (if (null? tree)
.                     result-list
.                     (copy-to-list (left-branch tree)
.                                   (cons (entry tree)
.                                         (copy-to-list (right-branch tree)
.                                                       result-list)))))
.         (copy-to-list tree '()))
tree->list-2

> (tree->list-2 myset)
(1 2 3)



> (define (partial-tree elts n)
.         (if (= n 0)
.             (cons '() elts)
.             (let ((left-size (quotient (- n 1) 2)))
.               (let ((left-result (partial-tree elts left-size)))
.                 (let ((left-tree (car left-result))
.                       (non-left-elts (cdr left-result))
.                       (right-size (- n (+ left-size 1))))
.                   (let ((this-entry (car non-left-elts))
.                         (right-result (partial-tree (cdr non-left-elts)
.                                                     right-size)))
.                     (let ((right-tree (car right-result))
.                           (remaining-elts (cdr right-result)))
.                       (cons (make-tree this-entry left-tree right-tree)
.                             remaining-elts))))))))
partial-tree

> (define (list->tree elements)
.         (car (partial-tree elements (length elements))))
list->tree

> (list->tree (list 3 1 2))


> (define (lookup given-key set-of-records)
.         (cond ((null? set-of-records) false)
.               ((equal? given-key (key (car set-of-records)))
.                (car set-of-records))
.               (else (lookup given-key (cdr set-of-records)))))
lookup

> insert basic test for above

