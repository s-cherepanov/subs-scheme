> (define (factorial n)
.         (if (= n 1)
.             1
.             (* n (factorial (- n 1)))))
factorial

> (factorial 6)
720


> (define (fact-iter product counter max-count)
.         (if (> counter max-count)
.             product
.             (fact-iter (* counter product)
.                        (+ counter 1)
.                        max-count)))
fact-iter

> (define (factorial n)
.         (fact-iter 1 1 n))
factorial

> (factorial 6)
720

> (define (inc x) (+ x 1))
inc

> (define (dec x) (- x 1))
dec

> (define (my+ a b)
.   (if (= a 0)
.       b
.       (inc (my+ (dec a) b))))
my+

> (my+ 4 5)
9

> (define (my+ a b)
.   (if (= a 0)
.       b
.       (my+ (dec a) (inc b))))
my+

> (my+ 4 5)
9

> (define (A x y)
.         (cond ((= y 0) 0)
.               ((= x 0) (* 2 y))
.               ((= y 1) 2)
.               (else (A (- x 1)
.                        (A x (- y 1))))))
A

> (A 1 10)
1024

> (A 2 4)
65536

> (A 3 3)
65536

> (define (f n) (A 0 n))
f

> (f 1)
2

> (f 10)
20


> (define (g n) (A 1 n))
g

> (g 1)
2

> (g 2)
4

> (g 10)
1024


> (define (h n) (A 2 n))
h


> (h 1)
2

> (h 2)
4

> (h 3)
16


> (define (k n) (* 5 n n))
k

> (k 3)
45


