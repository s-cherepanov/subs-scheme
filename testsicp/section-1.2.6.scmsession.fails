> (define (divides? a b)
.         (= (remainder b a) 0))
divides?

> (define (find-divisor n test-divisor)
.         (cond ((> (square test-divisor) n) n)
.               ((divides? test-divisor n) test-divisor)
.               (else (find-divisor n (+ test-divisor 1)))))
find-divisor

> (define (smallest-divisor n)
.         (find-divisor n 2))
smallest-divisor


> (define (prime? n)
.         (= n (smallest-divisor n)))
prime?

> (prime? 2)
#t

> (prime? 17)
#t

> (prime? 4)
#f

> (prime? 18)
#f


> (define (expmod base exp m)
.         (cond ((= exp 0) 1)
.               ((even? exp)
.                (remainder (square (expmod base (/ exp 2) m))
.                           m))
.               (else
.                (remainder (* base (expmod base (- exp 1) m))
.                           m))))
expmod


> (define (fermat-test n)
.         (define (try-it a)
.                 (= (expmod a n n) a))
.         (try-it (+ 1 (random (- n 1)))))
fermat-test

> (define (fast-prime? n times)
.         (cond ((= times 0) true)
.               ((fermat-test n) (fast-prime? n (- times 1)))
.               (else false)))
fast-prime?

> (define (report-prime elapsed-time)
.         (display " *** ")
.         (display elapsed-time))
report-prime

> (define (start-prime-test n start-time)
.         (if (prime? n)
.             (report-prime (- (runtime) start-time))))
start-prime-test

> (define (timed-prime-test n)
.         (newline)
.         (display n)
.         (start-prime-test n (runtime)))
timed-prime-test

> (timed-prime-test 16)



