> (define (add-interval x y)
.         (make-interval (+ (lower-bound x) (lower-bound y))
.                        (+ (upper-bound x) (upper-bound y))))
add-interval

> (define (mul-interval x y)
.         (let ((p1 (* (lower-bound x) (lower-bound y)))
.               (p2 (* (lower-bound x) (upper-bound y)))
.               (p3 (* (upper-bound x) (lower-bound y)))
.               (p4 (* (upper-bound x) (upper-bound y))))
.           (make-interval (min p1 p2 p3 p4)
.                          (max p1 p2 p3 p4))))
mul-interval

> (define (div-interval x y)
.         (mul-interval x
.                       (make-interval (/ 1.0 (upper-bound y))
.                                      (/ 1.0 (lower-bound y)))))
div-interval

> (define (make-interval a b) (cons a b))
make-interval

> (define (lower-bound i) (car i))
lower-bound

> (define (upper-bound i) (cdr i))
upper-bound

> (define (print-interval i)
.         (display "[")
.         (display (lower-bound i))
.         (display ":")
.         (display (upper-bound i))
.         (display "]")
.         (newline))
print-interval

> (define one-two (make-interval 1 2))
one-two

> (print-interval one-two)
[1:2]

> (print-interval (add-interval one-two one-two))
[2:4]

> (print-interval (mul-interval one-two one-two))
[1:4]

> (print-interval (div-interval one-two one-two))
[0.5:2.0]

> (define (make-center-width c w)
.         (make-interval (- c w) (+ c w)))
make-center-width

> (define four-pm-two (make-center-width 4 2))
four-pm-two

> (define (center i)
.         (/ (+ (lower-bound i) (upper-bound i)) 2))
center

> (center four-pm-two)
4

> (define (width i)
.         (/ (- (upper-bound i) (lower-bound i)) 2))
width

> (width four-pm-two)
2

> (define (par1 r1 r2)
.         (div-interval (mul-interval r1 r2)
.                       (add-interval r1 r2)))
par1

> (print-interval (par1 four-pm-two four-pm-two))
[0.333333:9.0]

> (define (par2 r1 r2)
.         (let ((one (make-interval 1 1)))
.              (div-interval one
.                            (add-interval (div-interval one r1)
.                                          (div-interval one r2)))))
par2

> (print-interval (par2 four-pm-two four-pm-two))
[1.0:3.0]


