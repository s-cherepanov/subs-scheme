> (define (sum-odd-squares tree)
.         (cond ((null? tree) 0)
.               ((not (pair? tree))
.                (if (odd? tree) (square tree) 0))
.               (else (+ (sum-odd-squares (car tree))
.                        (sum-odd-squares (cdr tree))))))
sum-odd-squares

> (sum-odd-squares (list 1 (list 2 (list 3 4) 5) (list 6 7)))
84

> (define (even-fibs n)
.         (define (next k)
.           (if (> k n)
.               nil
.               (let ((f (fib k)))
.                 (if (even? f)
.                     (cons f (next (+ k 1)))
.                     (next (+ k 1))))))
.         (next 0))
even-fibs

> (even-fibs 6)
(0 2 8)

> (map square (list 1 2 3 4 5))
(1 4 9 16 25)

> (define (filter predicate sequence)
.          (cond ((null? sequence) nil)
.                ((predicate (car sequence))
.                 (cons (car sequence)
.                       (filter predicate (cdr sequence))))
.                (else (filter predicate (cdr sequence)))))
filter

> (filter odd? (list 1 2 3 4 5))
(1 3 5)

> (define (accumulate op initial sequence)
.         (if (null? sequence)
.             initial
.             (op (car sequence)
.                 (accumulate op initial (cdr sequence)))))
accumulate

> (accumulate + 0 (list 1 2 3 4 5))
15

> (accumulate * 1 (list 1 2 3 4 5))
120

> (accumulate cons nil (list 1 2 3 4 5))
(1 2 3 4 5)

> (define (enumerate-interval low high)
.         (if (> low high)
.             nil
.             (cons low (enumerate-interval (+ low 1) high))))
enumerate-interval

> (enumerate-interval 2 7)
(2 3 4 5 6 7)

> (define (enumerate-tree tree)
.         (cond ((null? tree) nil)
.               ((not (pair? tree)) (list tree))
.               (else (append (enumerate-tree (car tree))
.                             (enumerate-tree (cdr tree))))))
enumerate-tree

> (enumerate-tree (list 1 (list 2 (list 3 4)) 5))
(1 2 3 4 5)

> (define (sum-odd-squares tree)
.         (accumulate +
.                     0
.                     (map square
.                          (filter odd?
.                                  (enumerate-tree tree)))))
sum-odd-squares

> (sum-odd-squares (list 1 (list 2 (list 3 4) 5) (list 6 7)))
84

> (define (even-fibs n)
.         (accumulate cons
.                     nil
.                     (filter even?
.                             (map fib
.                                  (enumerate-interval 0 n)))))
even-fibs

> (even-fibs 6)
(0 2 8)

> (define (list-fib-squares n)
.         (accumulate cons
.                     nil
.                     (map square
.                          (map fib
.                               (enumerate-interval 0 n)))))
list-fib-squares

> (list-fib-squares 10)
(0 1 1 4 9 25 64 169 441 1156 3025)

> (define (product-of-squares-of-odd-elements sequence)
.         (accumulate *
.                     1
.                     (map square
.                          (filter odd? sequence))))
product-of-squares-of-odd-elements

> (product-of-squares-of-odd-elements (list 1 2 3 4 5))
225

> (define (make-record type salary)
.         (cons type salary))
make-record

> (define (record-type record)
.         (car record))
record-type

> (define (salary record)
.         (cdr record))
salary

> (define (programmer? record)
.         (equal? "p" (record-type record)))
programmer?

> (define (salary-of-highest-paid-programmer records)
.         (accumulate max
.                     0
.                     (map salary
.                          (filter programmer? records))))
salary-of-highest-paid-programmer

> (salary-of-highest-paid-programmer (list (make-record "p" 13)
.                                          (make-record "m" 31)
.                                          (make-record "p" 19)
.                                          (make-record "p" 12)))
19

> (define (fold-left op initial sequence)
.         (define (iter result rest)
.                 (if (null? rest)
.                     result
.                     (iter (op result (car rest))
.                           (cdr rest))))
.         (iter initial sequence))
fold-left

> (define fold-right accumulate)
fold-right

> (fold-right / 1 (list 1 2 3))
1.5

> (fold-left / 1 (list 1 2 3))
0.166667

> (fold-right list nil (list 1 2 3))
(1 (2 (3 ())))

> (fold-left list nil (list 1 2 3))
(((() 1) 2) 3)

> (define (pairs-up-to n)
.         (accumulate append
.                     nil
.                     (map (lambda (i)
.                            (map (lambda (j) (list i j))
.                                 (enumerate-interval 1 (- i 1))))
.                          (enumerate-interval 1 n))))
pairs-up-to

> (pairs-up-to 3)
((2 1) (3 1) (3 2))

> (define (flatmap proc seq)
.         (accumulate append nil (map proc seq)))
flatmap

> (define (prime-sum? pair)
.         (prime? (+ (car pair) (cadr pair))))
prime-sum?

> (prime-sum? (list 2 1))
#t

> (prime-sum? (list 3 1))
#f

> (define (make-pair-sum pair)
.         (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))
make-pair-sum

> (define (prime-sum-pairs n)
.         (map make-pair-sum
.              (filter prime-sum?
.                      (flatmap
.                       (lambda (i)
.                         (map (lambda (j) (list i j))
.                              (enumerate-interval 1 (- i 1))))
.                       (enumerate-interval 1 n)))))
prime-sum-pairs


> (define (permutations s)
.         (if (null? s)                    ; empty set?
.             (list nil)                   ; sequence containing empty set
.             (flatmap (lambda (x)
.                        (map (lambda (p) (cons x p))
.                             (permutations (remove x s))))
.                      s)))
permutations

> (define (remove item sequence)
.         (filter (lambda (x) (not (= x item)))
.                 sequence))
remove

